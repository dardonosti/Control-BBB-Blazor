@page "/salas"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Control_BBB_Blazor.Data
@using Control_BBB_Blazor.Utils
@using System.IO;
@using System.Xml.Serialization;
@inject IHttpClientFactory httpClientFactory
@using Blazorise


<div class="card text-white bg-dark">
  <div class="card-header">
    <span style="font-size: 1.2em;">Salas</span>
    <span class="oi oi-monitor" aria-hidden="true" style="margin-top: 5px; float: right"></span>
  </div>
  <div class="card-body">
    <div>
      <button type="button" class="btn btn-primary btn-sm"><span class="oi oi-reload"></span>  Actualizar</button>
    </div>
    <div class="mt-4">
      <div class="row">
        <div class="col">
          @if (sinDatos)
          {
            <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span>
            <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
          }
          else
          {
            <TableTemplate Items="meetings.Meetings.Meeting">
              <TableHeader>
                <th>ID Sala</th>
                <th>Nombre de Sala</th>
                <th>Fecha y Hora</th>
                <th>Activa</th>
                <th>Acciones</th>
              </TableHeader>
              <RowTemplate>
                <td>@context.MeetingID</td>
                <td>@context.MeetingName</td>
                <td>@DateTimeOffset.FromUnixTimeMilliseconds(Int64.Parse(context.CreateTime)).ToString("dd/MM/yyyy HH:mm:ss")</td>
                <td>@if (context.Running == "true") { <span>Si</span> } else { <span>No</span> }</td>
                <td style="width:1px; white-space:nowrap;">
                  <Tooltip Text="Consultar Sala">
                    <button type="button" class="btn btn-primary btn-sm"><span class="oi oi-zoom-in pt-1" aria-hidden="true"></span></button>
                  </Tooltip>
                  <Tooltip Text="Consultar Usuarios">
                    <button type="button" class="btn btn-primary btn-sm ml-2"><span class="oi oi-people pt-1" aria-hidden="true"></span></button>
                  </Tooltip>
                  <Tooltip Text="Cerrar Sala">
                    <button type="button" class="btn btn-primary btn-sm ml-2"><span class="oi oi-circle-x pt-1" aria-hidden="true"></span></button>
                  </Tooltip>
                </td>
              </RowTemplate>
            </TableTemplate>
          }
        </div>
      </div>
    </div>
  </div>
</div>

@code {
  [Inject]
  protected Sotsera.Blazor.Toaster.IToaster Toaster { get; set; }

  private bool sinDatos = true;
  private string message = "No hay datos...";
  private string url { get; set; }
  private string secret { get; set; }
  private MeetingResponse meetings;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      url = await localStorage.GetItemAsync<string>("url");
      secret = await localStorage.GetItemAsync<string>("secret");
      try
      {
        var client = httpClientFactory.CreateClient();
        var response = await client.GetAsync(ApiCall.getMeetings(url, secret));
        string responseContent = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
          XmlSerializer x = new XmlSerializer(typeof(MeetingResponse));
          meetings = (MeetingResponse)x.Deserialize(new StringReader(responseContent));
          this.sinDatos = false;
          this.StateHasChanged();
        }
      }
      catch (Exception e)
      {
        Console.WriteLine(e);
        Toaster.Error("Ocurrió un error.", "Oops!");
      }
    }
  }
}