@page "/salas"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Control_BBB_Blazor.Data
@using System.Xml;

<div class="card text-white bg-dark">
  <div class="card-header">
    <span style="font-size: 1.2em;">Salas</span>
    <span class="oi oi-monitor" aria-hidden="true" style="margin-top: 5px; float: right"></span>
  </div>
  <div class="card-body">
    <div>
      <button type="button" class="btn btn-primary btn-sm"><span class="oi oi-reload"></span>  Actualizar</button>
    </div>
    <div class="mt-4">
      <div class="row">
        <div class="col">
          @if (string.IsNullOrEmpty(version))
                  {
                    <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span> 
                    <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
                  }
                  else
                  {
                    <span class="card-content-font">@version</span>
                  }
        </div>
      </div>
    </div>
  </div>
</div>

@code {
  [Inject]
  protected Sotsera.Blazor.Toaster.IToaster Toaster { get; set; }

  private string version { get; set; }
  private string message { get; set; } = "No hay datos...";
  private readonly HttpClient httpClient = new HttpClient();
  private VersionBBB versionBBB;
  private string myUrl { get; set; }
  private bool firstRender { get; set; } = true;
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      myUrl = await localStorage.GetItemAsync<string>("url");

      try
      {
        HttpResponseMessage response = await httpClient.GetAsync(myUrl);
        string stringCR = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
          //this.StateHasChanged();
        }
      }
      catch (Exception e)
      {
        Console.WriteLine(e);
        @* Toaster.Error("Ocurrió un error.", "Oops!");
        message = "Error...";
        this.StateHasChanged(); *@
      }
      firstRender = false;
    }
  }
}