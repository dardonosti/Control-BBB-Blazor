@page "/info"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Control_BBB_Blazor.Data
@using Control_BBB_Blazor.Utils
@using System.IO;
@using System.Xml.Serialization;

<div class="card text-white bg-dark">
  <div class="card-header">
    <span style="font-size: 1.2em;">Información</span>
    <span class="oi oi-info" aria-hidden="true" style="margin-top: 5px; float: right"></span>
  </div>
  <div class="card-body">
    <div class="row">
      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Versión BBB<span class="oi oi-info" style="color: gray; float: right"></span></h5>
            <p class="card-text">
              @if (string.IsNullOrEmpty(version))
              {
                <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span> 
                <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
              }
              else
              {
                <span class="card-content-font">@version</span>
              }
            </p>
          </div>
        </div>
      </div>

      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Total Salas<span class="oi oi-monitor" style="color: gray; float: right"></span></h5>
                <p class="card-text">
                  @if (string.IsNullOrEmpty(version))
                  {
                    <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span> 
                    <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
                  }
                  else
                  {
                    <span class="card-content-font">@version</span>
                  }
                </p>
          </div>
        </div>
      </div>
      
      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Salas Activas<span class="oi oi-monitor" style="color: gray; float: right"></span></h5>
                <p class="card-text">
                  @if (string.IsNullOrEmpty(version))
                  {
                    <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span> 
                    <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
                  }
                  else
                  {
                    <span class="card-content-font">@version</span>
                  }
                </p>
          </div>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Total Usuarios<span class="oi oi-people" style="color: gray; float: right"></span></h5>
                <p class="card-text">
                  @if (string.IsNullOrEmpty(version))
                  {
                    <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span> 
                    <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
                  }
                  else
                  {
                    <span class="card-content-font">@version</span>
                  }
                </p>
          </div>
        </div>
      </div>

      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Total Moderadores<span class="oi oi-people" style="color: gray; float: right"></span></h5>
                <p class="card-text">
                  @if (string.IsNullOrEmpty(version))
                  {
                    <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span> 
                    <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
                  }
                  else
                  {
                    <span class="card-content-font">@version</span>
                  }
                </p>
          </div>
        </div>
      </div>

      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Total Oyentes<span class="oi oi-people" style="color: gray; float: right"></span></h5>
                <p class="card-text">
                  @if (string.IsNullOrEmpty(version))
                  {
                    <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span> 
                    <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
                  }
                  else
                  {
                    <span class="card-content-font">@version</span>
                  }
                </p>
          </div>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Total con Audio<span class="oi oi-people" style="color: gray; float: right"></span></h5>
                <p class="card-text">
                  @if (string.IsNullOrEmpty(version))
                  {
                    <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span> 
                    <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
                  }
                  else
                  {
                    <span class="card-content-font">@version</span>
                  }
                </p>
          </div>
        </div>
      </div>

      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Total con Video<span class="oi oi-people" style="color: gray; float: right"></span></h5>
                <p class="card-text">
                  @if (string.IsNullOrEmpty(version))
                  {
                    <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span> 
                    <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
                  }
                  else
                  {
                    <span class="card-content-font">@version</span>
                  }
                </p>
          </div>
        </div>
      </div>

      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
      </div>
    </div>
  </div>
</div>

@code {
  [Inject]
      protected Sotsera.Blazor.Toaster.IToaster Toaster { get; set; }

      private string version { get; set; }
      private string message { get; set; } = "No hay datos...";
      private readonly HttpClient httpClient = new HttpClient();
      private VersionBBB versionBBB;
      private string url { get; set; }
      private string secret { get; set; }
      private bool firstRender { get; set; } = true;

      protected override async Task OnAfterRenderAsync(bool firstRender)
      {
          if (firstRender)
          {
              url = await localStorage.GetItemAsync<string>("url");
              secret = await localStorage.GetItemAsync<string>("secret");

              try
              {
                  HttpResponseMessage response = await httpClient.GetAsync(url);
                  string responseContent = await response.Content.ReadAsStringAsync();

                  if (response.IsSuccessStatusCode)
                  {
                      XmlSerializer x = new XmlSerializer(typeof(VersionBBB));
                      versionBBB = (VersionBBB)x.Deserialize(new StringReader(responseContent));
                      version = versionBBB.Version;
                      this.StateHasChanged();
                  }
              }
              catch (Exception e)
              {
                  Console.WriteLine(e);
                  @* Toaster.Error("Ocurrió un error.", "Oops!");
                  message = "Error...";
                  this.StateHasChanged(); *@
              }

              try
              {
                  HttpResponseMessage response = await httpClient.GetAsync(ApiCall.getMeetings(url, secret));
                  string responseContent = await response.Content.ReadAsStringAsync();

                  if (response.IsSuccessStatusCode)
                  {
                      //this.StateHasChanged();
                  }
              }
              catch (Exception e)
              {
                  Console.WriteLine(e);
                  @* Toaster.Error("Ocurrió un error.", "Oops!");
                  message = "Error...";
                  this.StateHasChanged(); *@
              }

              firstRender = false;
          }
      }
}