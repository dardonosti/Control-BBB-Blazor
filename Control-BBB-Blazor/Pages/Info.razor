@page "/info"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Control_BBB_Blazor.Data
@using Control_BBB_Blazor.Utils
@using System.IO;
@using System.Xml.Serialization;
@inject IHttpClientFactory httpClientFactory 

<div class="card text-white bg-dark">
  <div class="card-header">
    <span style="font-size: 1.2em;">Información</span>
    <span class="oi oi-info" aria-hidden="true" style="margin-top: 5px; float: right"></span>
  </div>
  <div class="card-body">
    <div class="row">
      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Versión BBB<span class="oi oi-info" style="color: gray; float: right"></span></h5>
            <p class="card-text">
              @if (string.IsNullOrEmpty(version))
              {
                <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span>
                <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
              }
              else
              {
                <span class="card-content-font">@version</span>
              }
            </p>
          </div>
        </div>
      </div>

      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Total Salas<span class="oi oi-monitor" style="color: gray; float: right"></span></h5>
            <p class="card-text">
              @if (string.IsNullOrEmpty(salas))
              {
                <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span>
                <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
              }
              else
              {
                <span class="card-content-font">@salas</span>
              }
            </p>
          </div>
        </div>
      </div>

      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Salas Activas<span class="oi oi-monitor" style="color: gray; float: right"></span></h5>
            <p class="card-text">
              @if (string.IsNullOrEmpty(activas))
              {
                <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span>
                <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
              }
              else
              {
                <span class="card-content-font">@activas</span>
              }
            </p>
          </div>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Total Usuarios<span class="oi oi-people" style="color: gray; float: right"></span></h5>
            <p class="card-text">
              @if (sinDatos)
              {
                <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span>
                <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
              }
              else
              {
                <span class="card-content-font">@totalUsuarios</span>
              }
            </p>
          </div>
        </div>
      </div>

      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Total Moderadores<span class="oi oi-people" style="color: gray; float: right"></span></h5>
            <p class="card-text">
              @if (sinDatos)
              {
                <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span>
                <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
              }
              else
              {
                <span class="card-content-font">@totalModeradores</span>
              }
            </p>
          </div>
        </div>
      </div>

      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Total Oyentes<span class="oi oi-people" style="color: gray; float: right"></span></h5>
            <p class="card-text">
              @if (sinDatos)
              {
                <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span>
                <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
              }
              else
              {
                <span class="card-content-font">@oyentes</span>
              }
            </p>
          </div>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Total con Audio<span class="oi oi-people" style="color: gray; float: right"></span></h5>
            <p class="card-text">
              @if (sinDatos)
              {
                <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span>
                <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
              }
              else
              {
                <span class="card-content-font">@conAudio</span>
              }
            </p>
          </div>
        </div>
      </div>

      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
        <div class="card text-white bg-dark">
          <div class="card-body">
            <h5 class="card-title">Total con Video<span class="oi oi-people" style="color: gray; float: right"></span></h5>
            <p class="card-text">
              @if (sinDatos)
              {
                <span class="oi oi-warning d-flex justify-content-center" aria-hidden="true" style="color: gray;"></span>
                <span class="d-flex justify-content-center mt-1" style="font-size: 0.9em; color: gray;"><i>@message</i></span>
              }
              else
              {
                <span class="card-content-font">@conVideo</span>
              }
            </p>
          </div>
        </div>
      </div>

      <div class="col-sm-12 col-md-12 col-lg-4 mb-4">
      </div>
    </div>
  </div>
</div>

@code {
  [Inject]
  protected Sotsera.Blazor.Toaster.IToaster Toaster { get; set; }

  private string version { get; set; }
  private string salas { get; set; }
  private string activas { get; set; }
  private string totalUsuarios { get; set; } = "0";
  private string totalModeradores { get; set; } = "0";
  private string oyentes { get; set; } = "0";
  private string conAudio { get; set; } = "0";
  private string conVideo { get; set; } = "0";
  private bool sinDatos = true;

  private string message { get; set; } = "No hay datos...";
  private VersionBBB versionBBB;
  private MeetingResponse meetings;
  private MeetingInfoResponse meetingsInfo;
  private string url { get; set; }
  private string secret { get; set; }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      url = await localStorage.GetItemAsync<string>("url");
      secret = await localStorage.GetItemAsync<string>("secret");

      try
      {
        var client = httpClientFactory.CreateClient();
        var response = await client.GetAsync(url);
        string responseContent = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
          XmlSerializer x = new XmlSerializer(typeof(VersionBBB));
          versionBBB = (VersionBBB)x.Deserialize(new StringReader(responseContent));
          version = versionBBB.Version;
          this.StateHasChanged();
        }
      }
      catch (Exception e)
      {
        Console.WriteLine(e);
      }

      try
      {
        var client = httpClientFactory.CreateClient();
        var response = await client.GetAsync(ApiCall.getMeetings(url, secret));
        string responseContent = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
          XmlSerializer x = new XmlSerializer(typeof(MeetingResponse));
          meetings = (MeetingResponse)x.Deserialize(new StringReader(responseContent));
          var count = 0;

          if (meetings.Meetings.Meeting.Count() != 0)
          {
            for (int i = 0; i < meetings.Meetings.Meeting.Count(); ++i)
            {
              if (meetings.Meetings.Meeting[i].Running[0].ToString() == "true")
              {
                count++;
              }
              this.salas = meetings.Meetings.Meeting.Count().ToString();
              this.activas = count.ToString();
              this.StateHasChanged();
            }
          }

          for (int i = 0; i < meetings.Meetings.Meeting.Count(); ++i)
          {
            try
            {
              response = await client.GetAsync(ApiCall.getMeetingInfo(meetings.Meetings.Meeting[i], url, secret));
              responseContent = await response.Content.ReadAsStringAsync();

              if (response.IsSuccessStatusCode)
              {
                XmlSerializer xMInfo = new XmlSerializer(typeof(MeetingInfoResponse));
                meetingsInfo = (MeetingInfoResponse)xMInfo.Deserialize(new StringReader(responseContent));

                this.totalUsuarios = (int.Parse(this.totalUsuarios) + int.Parse(meetingsInfo.ParticipantCount[0].ToString())).ToString();
                this.totalModeradores = (int.Parse(this.totalModeradores) + int.Parse(meetingsInfo.ModeratorCount[0].ToString())).ToString();
                this.oyentes = (int.Parse(this.oyentes) + int.Parse(meetingsInfo.ListenerCount[0].ToString())).ToString();
                this.conAudio = (int.Parse(this.conAudio) + int.Parse(meetingsInfo.VoiceParticipantCount[0].ToString())).ToString();
                this.conVideo = (int.Parse(this.conVideo) + int.Parse(meetingsInfo.VideoCount[0].ToString())).ToString();
                this.sinDatos = false;
                this.StateHasChanged();
              }
            }
            catch (Exception e)
            {
              Console.WriteLine(e);
            }
          }
        }
      }
      catch (Exception e)
      {
        Console.WriteLine(e);
        Toaster.Error("Ocurrió un error.", "Oops!");
      }
    }
  }
}